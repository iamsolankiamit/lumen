<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog by Amit Solanki]]></title><description><![CDATA[I develop in and write about Javascript, Reason, and React]]></description><link>http://solankiamit.com</link><generator>RSS for Node</generator><lastBuildDate>Sat, 03 Nov 2018 12:33:32 GMT</lastBuildDate><item><title><![CDATA[10 Console tricks, to debug like a Pro.]]></title><description><![CDATA[Some built-in console methods, which can make debugging fun ;)]]></description><link>http://solankiamit.com/posts/10-Console-tricks-to-debug-like-a-pro/</link><guid isPermaLink="false">http://solankiamit.com/posts/10-Console-tricks-to-debug-like-a-pro/</guid><pubDate>Sat, 13 Oct 2018 22:40:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/cover-3b14fb52323086494a13c77c485ca8ee.gif&quot; alt=&quot;Console Javascript&quot;&gt;&lt;/p&gt;
&lt;p&gt;Okay, I know it’s kinda like a click-bait title, but trust me you’ll be surprised by what console can do. let’s start with some basic ones.&lt;/p&gt;
&lt;h3&gt;1. console.group(‘name’) and console.groupEnd(‘name’)&lt;/h3&gt;
&lt;p&gt;As the name suggests it will group multiple logs in one single expandable group, you can even nest them if you’d like to further group them. &lt;code class=&quot;language-text&quot;&gt;console.group(‘groupName’)&lt;/code&gt; starts the group and &lt;code class=&quot;language-text&quot;&gt;console.groupEnd(‘groupName’)&lt;/code&gt; closes a group. There is a third function &lt;code class=&quot;language-text&quot;&gt;console.groupCollapsed&lt;/code&gt; which creates the group in collapsed mode.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*_fsPZTznKQEFvrYI3tyswA.png&quot; alt=&quot;Console.group Demo&quot;&gt;&lt;em&gt;&lt;code class=&quot;language-text&quot;&gt;console.group&lt;/code&gt; Demo&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;2. console.trace()&lt;/h3&gt;
&lt;p&gt;When you need to find the whole call stack of a function, &lt;code class=&quot;language-text&quot;&gt;console.trace&lt;/code&gt; is super useful, I use this mostly to find from where callback is passed, it will print the whole stack-trace. Let’s take an example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*WpqaYPHjMvmDR8R7JPpfAA.png&quot; alt=&quot;The output of console.trace()&quot;&gt;&lt;em&gt;The output of console.trace()&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;3. console.count(“counter: ”)&lt;/h3&gt;
&lt;p&gt;I use this so much, mostly to find how many times a component is rendered in react. As you can guess this will log the total count of the number of times it was executed. Remember if you change the string which is logged, it will start a new counter for that string, we also have a handy function to reset the counter: &lt;code class=&quot;language-text&quot;&gt;console.countReset(‘Counter’)&lt;/code&gt;, the name should match though.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*zarUNcE_U2MZt76JxuSDiw.png&quot; alt=&quot;the output of console.count and console.countReset&quot;&gt;&lt;em&gt;the output of console.count and console.countReset&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;4. console.time() and console.timeEnd()&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;console.time()&lt;/code&gt; will start a timer and will end it once &lt;code class=&quot;language-text&quot;&gt;timeEnd()&lt;/code&gt; is called, they are mostly used when you need to do performance check. You can also pass a string to time and timeEnd and it will start another timer of that name.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*fnuFkWChcKnqQv18CCtfRA.png&quot;&gt;&lt;/p&gt;
&lt;h3&gt;5. console.assert()&lt;/h3&gt;
&lt;p&gt;So let’s say you need to check if some expression/value ever becomes false, and when it does you want it to be logged, now you would normally wrap this is an if-else, but no need to do that console.assert does the job for you, you need to pass the condition first and message/object as 2nd param. Let’s check the following example&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;greaterThan&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a is not greater than b&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;greaterThan&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2296/1*88PjXjyukZpDTHkW2CEsXg.png&quot;&gt;&lt;/p&gt;
&lt;h3&gt;6. console.profile([label])&lt;/h3&gt;
&lt;p&gt;How many times have you wished if you could start profiling when it is needed instead of keeping it on from start and then manually finding the point which you needed to profile. Well, &lt;code class=&quot;language-text&quot;&gt;console.profile()&lt;/code&gt; comes to rescue. when you are done profiling just call &lt;code class=&quot;language-text&quot;&gt;console.profileEnd()&lt;/code&gt;, let’s take an example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;thisNeedsToBeProfiled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;thisNeedsToBeProfiled()&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// later, after doing some stuff&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;profileEnd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;p&gt;this will log and add in &lt;strong&gt;profiles&lt;/strong&gt; panel.&lt;/p&gt;
&lt;h3&gt;7. console.timeStamp([label])&lt;/h3&gt;
&lt;p&gt;Adds an event to the &lt;strong&gt;Timeline&lt;/strong&gt; during a recording session. I use this to mark places where the API call returned and when was the data processed, there are many use cases for this though.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot;&gt;
      &lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;timeStamp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;custom timestamp!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
&lt;h3&gt;8. console.clear()&lt;/h3&gt;
&lt;p&gt;This is pretty clear(pun intended), it clears the console, nothing much here.&lt;/p&gt;
&lt;h3&gt;9. console.memory&lt;/h3&gt;
&lt;p&gt;This is not a function, but a property which stores your HeapSize, when perf is tricky and graphs are hard to read, simply logging the memory might help.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/3008/1*-9StbJKYXCOELKhzOJMhgw.png&quot; alt=&quot;console.memory output&quot;&gt;&lt;em&gt;console.memory output&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;10. console.table(array)&lt;/h3&gt;
&lt;p&gt;This is my fav. and best trick, it prints a slick table, with which you can interact, you need to pass an array of object to it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/4456/1*ZYb_JxgD-kKJ7mda8p3Zow.png&quot; alt=&quot;console.table’s output&quot;&gt;&lt;em&gt;console.table’s output&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Go ahead and try some of these, let me know about your debugging hacks. &lt;/p&gt;
&lt;p&gt;Don’t forget to share this and subscribe to the newsletter, I write about improving in Javascript, trying new concepts from different languages etc. Mostly ReasonMl, elixir, and everything functional ;)&lt;/p&gt;
&lt;p&gt;
&lt;iframe
scrolling=&quot;no&quot;
style=&quot;width:100%!important;height:220px;border:1px #ccc solid !important&quot;
src=&quot;https://buttondown.email/iamsolankiamit?as_embed=true&quot;
&gt;&lt;/iframe&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Cross posted on &lt;a href=&quot;https://itnext.io/10-console-tricks-to-debug-like-a-pro-66ee2225ec57&quot;&gt;Medium&lt;/a&gt;. Give it some claps (👏)x50 there.&lt;/em&gt;&lt;/p&gt;</content:encoded></item></channel></rss>